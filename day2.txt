--------------------------github--------------------------------------
클론: 원격저장소(github에서 만든 저장소)에 있는 내용들을 로컬 저장소에 복제

커밋 : 변경 이력을 현재 사용중인 로컬 저장소에 남김 -> 파일들이 변경 (추가/수정/삭제/이동/이름변경)

푸쉬 : 현재 저장소에서 새로 추가된 변경이력들을 원격 저장소에 추가

풀 : 원격저장소에 있는 변경 이력들을 가져옴

페치오리진 : 원격저장소에 새로운 변경사항이 있는지 확인

.gitignore : git으로 올리지 않을 파일들을 설정해주는 파일


------------------------------------eclipse-----------------------------
1. 자바 프로젝트 생성(한번만) -> Module 체크 해제
2. 패키지 생성(필요시) 
3. 클래스 파일 생성(예제할 때 마다) -> 클래스 이름 첫글자에 대문자 사용

단축키
새로만들기 : Ctrl+n
저장 : Ctrl+s
이름수정 : F2
실행 : F11
자동완성 : Ctrl+space



----------------------------변수---------------------------------------
-자료형 : 8개		//char, byte, short, int, long, float, double, boolean
-변수 선언 방법
-변수 작성 규칙/관례
-자료형변환

변수 명명 규칙
1. 대소문자 구분		//num과 NUM은 다른 변수
2. 예약어 사용 불가		//int int; 불가능
3. 숫자로 시작 불가		//int 1num; 불가능
4. 특수문자는 _와 $만 가능	//
5. 변수명 중복 선언 불가능	//

변수 명명 관례
1. 변수명의 첫 글자는 소문자로 시작					//
2. 여러 단어로 된 경우 두번 째 단어부터 첫글자만 대문자로 -> 카멜 표기법	//totalCount
3. 상수는 대문자로 하며, 단어 구분을 _로 함				//MAX_AGE
4. 클래스 명의 첫 글자는 대문자로 시작				//

기본형
정수 : byte, short, int, long
문자 : char
실수 : float, double
논리 : boolean

참조형 - String
String 클래스 : 문자열을 저장하는 클래스로 다양한 기능을 제공
""를 이용하여 문자열을 관리
문자열은 문자 0개 이상 가능
참조 변수는 null을 이용하여 비어있다는 것을 나타냄
빈 문자열 => 화장실에 휴지가 있는데 휴지심만 있는 경우
null => 휴지가 없는 경우

변수 - 하나의 값을 저장하는 공간		//int score = 95; score:변수, 95:리터럴
상수 - 값을 저장 후 수정할 수 없는 공간	//final int MAX_AGE = 100; MAX_AGE:상수, 100:리터럴
리터럴 - 그 자체로 값을 의미			//앞에 final을 붙이면 상수가 되며 선언과 동시에 초기화를 하는 것이 좋다

문자열의 특징
문자열 + 기본형 = 문자열
기본형 + 문자열 = 문자열
ex)
"abc" + 1 = "abc1"
1 + "abc" = "1abc"
"abc" + 1 + 2 = "abc12"
1 + 2 + "abc" = "3abc"	//1 + 2 연산을 먼저 한 후 "abc"와 합쳐져 문자열이 된다.

오버플로우
정수 변수가 표현할 수 있는 정수의 범위를 넘어서 의도했던 값과 다르게 나오는 현상으로 양수에서 음수로 될 때
ex)
byte num = 127;
num = num + 1; //byte로 표현 가능한 가장 큰 정수 127에 1을 더해 128이 아닌 -128이 저장된다(byte로 128은 표현 불가능)

언더플로우
byte num = -128;
num = num - 1; //byte로 표현 가능한 가장 작은 정수 -128에 1을 빼 -129이 아닌 127이 저장된다(byte로 -129는 표현 불가능)

형변환
값을 다른 자료형(변수타입)으로 변환하는 것
boolean을 제외한 기본형은 변환 가능

자동(묵시적) 자료형 변환	//알아서 변환이 되는 경우
정수 -> 실수
문자 -> 정수
바이트가 작은 자료형 -> 바이트가 큰 자료형

강제(명시적) 자료형 변환	//자동으로 일어나지 않거나(에러 발생요인) 필요에 의해 강제로 변환해야 하는 경우
실수 -> 정수
바이트가 큰 자료형 -> 바이트가 작은 자료형
자동 자료형 변환이 일어나지만 필요에 의한 경우 : 나누기
변환하고자 하는 변수/리터럴/상수 앞에 변환하려는 자료형을 써 줌

---------------------------------------------연산자--------------------------------------------
연산자 : 연산에 사용하는 기호
항 : 연산에 사용하는 값

대입연산자p71 (=)
변수에 값을 대입(저장)하는 연산자			//변수의 값이 바뀜
오른쪽에 있는 값(식 또는 변수 또는 값)을 왼쪽에 저장	//이항 연산자 중 우선 순위가 가장 낮음
						//여러 연산자가 있는경우 연산을 모두 다 한 후 대입 연산자가 실행
왼쪽에는 변수나 상수만 올 수 있음(참조 p72)

산술연산자p73 (+, -, *, /, %)
+, -, *는 일반 수학과 같음
/ : 일반 수학과 다름(중요) 	//상황에 따라 형변환이 필요할 수도 있음
정수 / 정수 => 정수	//소수점이 버려질 수 있음
정수 / 실수 => 실수
실수 / 정수 => 실수
실수 / 실수 => 실수
% : 나머지를 구하는 연산자	// 5 % 3=2

증감연산자p74 (++, --)
최종적으로 변수가 1 증가/감소한다.
위치에 따라서 전위형/후위형으로 나뉜다.
++변수 : 전위형, 증가 후 실행
변수++ : 후위형, 실행 후 증가